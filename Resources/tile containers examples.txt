base:
 0  1  2  3  4  5  6  7
 8  9 10 11 12 13 14 15
16 17 18 19 20 21 22 23
24 25 26 27 28 29 30 31
32 33 34 35 36 37 38 39
40 41 42 43 44 45 46 47

 0  1  2  3  4  5  6  7

initial
_|  1  2  3 | 4  5  6 |_
 8  o  o  b | i  i ff 15
16  o  o  o | i  i  i 23
24  b  o  o | c  i  i 31
32  o  o  o | e  f  i 39
-| 41 42 43 |-| 45 46 |-

check
_|  1  v  v | v  v  6 |_
 >  <  ^  ^ | ^  ^  > < 
 >  <  v  v | x  v  > < 
 >  <  ^  ^ | c  ^  > < 
 >  <  v  v | e  v  > < 
-| 41  ^  ^ |-|  ^ 46 |-
30 points

tile space:
- id
- tile type enum
- base tile
 - id
 - name
 - effects
  - receive x for y turns
  - change building rules
  - change game meta rules
  - discount construction cost
  - points
  - receive x given z condition
  - increase dwarf cap by p
  - increase animal storage
? indoors
- animal type
- animal quantity
- has stable

( a AND_THEN_OR b ) AND_OR ( c OR d )

AND_OR
AND_THEN_OR    OR
a b            c d

AND_THEN:1 = a THEN b
AND_THEN:2 = b

AND_OR:1 = a AND b
AND_OR:2 = a
AND_OR:2 = b

OR = AND_OR

(BREADTH_FIRST: AND_OR, AND_THEN, OR):
1,1,1: (a b) (c d)
1,1,2: (a b) (c)
1,1,3: (a b) (d)
1,2,1: (b) (c d)
1,2,2: (b) (c)
1,2,3: (b) (d)
2,1,_: (a b)
2,2,_: (b)
3,_,1: (c d)
3,_,2: (c)
3,_,3: (d)

example: hardware rental
self._actions = Combination(
    ActionCombinationEnum.AndThenOr,
    receiveAction.ReceiveAction( {ResourceTypeEnum.wood, 2} ),
    Combination(
        ActionCombinationEnum.AndThenOr,
        goOnAnExpeditionAction.GoOnAnExpeditionAction( 2 ),
        sowAction.SowAction() ) )
AND_THEN_OR
A    AND_THEN_OR
     B  C
     
1,1: a b c
1,2: a c
2,1: b c
2,2: c

example: ore mine construction
self._actions = Combination(
    ActionCombinationEnum.AndThenOr,
    Combination(
        ActionCombinationEnum.AndThen,
        placeATileAction.PlaceATileAction( TileTypeEnum.oreMineDeepTunnelTwin ),
        receiveAction.ReceiveAction( { ResourceTypeEnum.ore: 3 } ) ),
    goOnAnExpeditionAction.GoOnAnExpeditionAction( 3 ) )
    
AND_THEN_OR
AND_OR    c
a    b

1,1: a b c
1,2: a c
1,3: b c
2,_: c